using LinearAlgebra,LowRankApprox,QuadEig,Printf

function fmean(v::Vector,f::Function,f‚Åª¬π::Function)
    return f‚Åª¬π(sum(f.(v))/size(v)[1])
end

function b(r::Union{Int,UnitRange{Int}},‚Ñì::Int) #function to help out with long block indices with constant block size
    if typeof(r) <: Int
        return (r-1)‚Ñì+1:r*‚Ñì
    else
        return (minimum(r)-1)‚Ñì+1:maximum(r)*‚Ñì
    end
end

#this function doesn't actually compute a rrqr factorisation because R will not necessarily be upper trapezoidal, but we don't really care
function rrqr(A::Matrix,tol::Float64)
    Q,R,p = pqr(A,rtol=tol) #use the so-called `partial QR factorisation'
    return Q,R*ColumnPermutation(p)' #return Q and (unfortunately non-upper trapezoidal) R
end

every(Œª) = true #this function is just here as the default for the keep function in quadEigRBTOAR

deflate_distant(Œª) = [(sum(abs(Œª[i]) .< abs.(Œª)) < 2*size(Œª,1)/3) for i in 1:size(Œª,1)] #we actually want to deflate those closest to 0 in the shifted-inverted QEP

"""
    BTOAR(M‚Åª¬π::Function, D::Function, K::Function, R::Matrix{Complex{Float64}}, k::Int, deftol::Float64=NaN, verb::Int=0)
    
Compute an orthogonal basis for the `k`th second-order Krylov subspace G‚Çñ(M‚Åª¬πD,M‚Åª¬πK;R).

# Arguments
 -`M‚Åª¬π::Function`: function that provides left-multiplication of `n`√ó`‚Ñì` matrices by the inverse of M.\n
 -`D::Function`: function that provides left-multiplication of `n`√ó`‚Ñì` matrices by the matrix D.\n
 -`K::Function`: function that provides left-multiplication of `n`√ó`‚Ñì` matrices by the matrix K.\n
 -`R::Matrix{Complex{Float64}}`: starting `n`√ó`‚Ñì` block vector R.\n
 -`k::Int`: degree of the second-order Krylov subspace G‚Çñ(A,B;R) required.\n
 -`deftol::Float64`: internal numerical tolerance for deflation detection, defaults to `1e-10`.\n
 -`verb::Int`: level of verbosity. 0: no verbosity, 1: some verbosity, 2: full verbosity. `verb=2` has a large performance impact.\n

# Returns
 -`Q‚Çñ::Matrix{Complex{Float64}}`: orthonormal basis for second-order Krylov subspace G‚Çñ(A,B;R).\n
 -`U‚Çñ::Matrix{Complex{Float64}}`: orthonormal matrix such that `V‚Çñ`=(`I‚ÇÇ`‚äó`Q‚Çñ`)`U‚Çñ`, where `V‚Çñ` is an orthonormal basis for the first-order Krylov subspace K‚Çñ([A B;I 0];[`R`;0]).\n
 -`H‚Çñ::Matrix{Complex{Float64}}`: block-upper Hessenberg matrix such that [A B;I 0]`V‚Çñ‚Çã‚ÇÅ`=`V‚ÇñH‚Çñ`, where `V‚Çñ` is as defined above.\n
 -`œÅ‚ÇÅ::Float64`: 1-norm orthonormality residual ‚Äñ`Q‚Çñ·¥¥Q‚Çñ`-I‚Äñ‚ÇÅ.\n
 -`œÅ‚ÇÇ::Float64`: 1-norm orthonormality residual ‚Äñ`U‚Çñ·¥¥U‚Çñ`-I‚Äñ‚ÇÅ.\n
 -`œÅ‚ÇÉ::Float64`: 1-norm TOAR relation residual ‚Äñ[A B;I 0]*(`I‚ÇÇ`‚äó`Q‚Çñ‚Çã‚ÇÅ`)`U‚Çñ‚Çã‚ÇÅ` - (`I‚ÇÇ`‚äó`Q‚Çñ`)`U‚ÇñH‚Çñ`‚Äñ‚ÇÅ / ‚Äñ(`I‚ÇÇ`‚äó`Q‚Çñ`)`U‚ÇñH‚Çñ`‚Äñ‚ÇÅ.\n
"""
function BTOAR(M‚Åª¬π::Function,D::Function,K::Function,R::Matrix,k::Int;deftol::Float64=NaN,verb::Int=0)
    n,‚Ñì = size(R) #n and ‚Ñì are not function arguments, but are taken implicitly from R

    if deftol ‚â° NaN #if deftol isn't set, we give it a reasonable default
        deftol = ‚Ñì*eps(Float64) #machine epsilon times the smallest dimension of the matrix is a standard numerical rank tolerance
    end
    if deftol < eps(Float64) #warning about setting deflation tolerance too low
        @warn "deftol should not be set lower than œµ‚âà2.22√ó10‚Åª¬π‚Å∂ (deftol=$deftol)\nSetting deftol to œµ"
        deftol = eps(Float64)
    end
    if deftol ‚â• 1.0 #not sure what the highest reasonable deftol would be
        @warn "deftol way too large (deftol=$deftol)\nSetting deftol to œµ‚Ñì=$(‚Ñì*eps(Float64))"
        deftol = ‚Ñì*eps(Float64)
    end
    if k*‚Ñì > n #warning about setting k too large
        @warn "k‚Ñì greater than n, expect deflation (k‚Ñì = $(k*‚Ñì), n = $n)"
    end
    if verb > 2
        @warn "valid values of verb are 0, 1 and 2\nSetting verb to 2"
        verb = 2
    end
    if verb < 0
        @warn "valid values of verb are 0, 1 and 2\nSetting verb to 0"
        verb = 0
    end
    
    m = zeros(Int,k) #we preallocate the array of ranks of R‚±º-Q‚±ºS‚±º (note that m[1] is m‚ÇÄ, not m‚ÇÅ)
    m[1] = rank(R[1:‚Ñì,:],rtol=deftol) #to save time, we start by taking the rank of a small full-width submatrix of R
    if m[1] < ‚Ñì #if the small full-width submatrix was rank deficient (unlikely most of the time) 
        m[1] = rank(R,rtol=deftol) #test the rank of the full block vector R
        if m[1] < ‚Ñì #if R is rank-deficient
            R = Matrix(rrqr(R)[1]) #we reduce R to an orthonormal matrix with the same span, using the RRQR factorisation
            ‚Ñì = m[1] #the new ‚Ñì after R has been reduced
            if verb > 0
                print("Starting vector R rank deficient, reducing ‚Ñì to $‚Ñì\n")
            end
        end
    end
    Q,R = qr(R) #standard QR factorisation because R now must be full-rank
    Q‚±º = Matrix{ComplexF64}(Q) #qr() outputs Q in a special form without explicitly forming the matrix, so we have to tell it to
    U‚±º = [I(‚Ñì);zeros(Complex{Float64},‚Ñì,‚Ñì)] #because V‚ÇÅ = [Q‚ÇÅ;0]
    H‚Çñ = zeros(Complex{Float64},k*‚Ñì,(k-1)*‚Ñì) #we can preallocate H because its final size is known now
    
    for j in 1:k-1 #main for loop
        R‚±º = M‚Åª¬π(D(Q‚±º*-U‚±º[1:sum(m),(j-1)‚Ñì+1:j*‚Ñì]) + K(Q‚±º*-U‚±º[sum(m)+1:2sum(m),(j-1)‚Ñì+1:j*‚Ñì])) #take next R‚±º block vector
        S‚±º = zeros(Complex{Float64},sum(m[1:j]),‚Ñì) #preallocate S‚±º
        for i in 1:sum(m[1:j]) #doing it this way seems to greatly reduce error for Ansys QEPs
            S‚±º[i:i,:] = Q‚±º[:,i:i]'*R‚±º #coefficients of components of R‚±º parallel to columns of Q‚±º
            R‚±º -= Q‚±º[:,i:i]*S‚±º[i:i,:] #subtract off parts of R‚±º that are parallel to columns of Q‚±º
        end
        for i in 1:sum(m[1:j]) #partial reorthogonalisation
            S·µ£‚Çë‚Çõ = Q‚±º[:,i:i]'*R‚±º #not the full residual (block) vector
            R‚±º -= Q‚±º[:,i:i]*S·µ£‚Çë‚Çõ #correct R‚±º
            S‚±º[i:i,:] += S·µ£‚Çë‚Çõ #correct S‚±º
        end
        Q ∞,R ∞ = rrqr(R‚±º,deftol) #MIGHT WANT TO DO CHEAP RANK TEST HERE FOR EFFICIENCY DEPENDING ON PERFORMANCE OF RRQR
        m[j+1] = size(Q ∞,2) #record the rank of R‚±º-Q‚±º*S‚±º
        if m[j+1] < ‚Ñì #if we have deflation
            if verb == 1 #if we have medium verbosity
                print("üü®j=$j,m‚±º=$(m[j+1])\n") #tell the user
            elseif verb == 2 #if we have high verbosity
                print("üü®Deflation at j=$j (m‚±º=$(m[j+1])) ") #tell the user more
                #here, we want to estimate the maximum value of deftol that would have caused the deflation to pass
                tdt = deftol #trial deftol starts as deftol
                for i in 1:20 #don't need a very fine approximation
                    if size(rrqr(R‚±º,tdt)[1],2) == m[j+1] #if too high
                        tdt *= (eps(Float64) / deftol)^(2.0^-i)
                    else #if too low
                        tdt *= (deftol / eps(Float64))^(2.0^-i)
                    end
                end
                print("(mdt=$tdt)\n")
            end
        elseif verb == 2 #if verbosity is high and there is no deflation
            print("üü©No deflation at j=$j ") #we inform the user
            #here, we want to estimate the minimum value of deftol that would have caught a "deflation"
            tdt = deftol #trial deftol starts as deftol
            for i in 1:20 #don't need a very fine approximation
                if size(rrqr(R‚±º,tdt)[1],2) < m[j+1] #if too high
                    tdt *= (deftol / 1.0)^(2.0^-i)
                else #if too high
                    tdt *= (1.0 / deftol)^(2.0^-i)
                end
            end
            print("(mdt=$tdt)\n")
        elseif verb == 1 #finally, if verbosity is medium and there is no deflation
            print("üü©") #just a green square with no newline character
        end
        Q‚±º = [Q‚±º Q ∞] #append the newly computed columns to Q‚±º
        U ∞ = U‚±º[1:sum(m[1:j]),(j-1)‚Ñì+1:j*‚Ñì] #we copy this because we want to modify it in the orthogonalisation without modifying U‚±º
        for i = 1:j #second-level orthogonalisation
            H‚Çñ[(i-1)‚Ñì+1:i*‚Ñì,(j-1)‚Ñì+1:j*‚Ñì] = U‚±º[1:sum(m[1:j]),(i-1)‚Ñì+1:i*‚Ñì]'*S‚±º + U‚±º[sum(m[1:j])+1:2sum(m[1:j]),(i-1)‚Ñì+1:i*‚Ñì]'*U ∞ #fill in new block column of H‚Çñ
            S‚±º -= U‚±º[1:sum(m[1:j]),(i-1)‚Ñì+1:i*‚Ñì]*H‚Çñ[(i-1)‚Ñì+1:i*‚Ñì,(j-1)‚Ñì+1:j*‚Ñì] #orthogonalise S‚±º against U‚±º,‚ÇÅ
            U ∞ -= U‚±º[sum(m[1:j])+1:2sum(m[1:j]),(i-1)‚Ñì+1:i*‚Ñì]*H‚Çñ[(i-1)‚Ñì+1:i*‚Ñì,(j-1)‚Ñì+1:j*‚Ñì] #and U ∞ against U‚±º,‚ÇÇ
        end
        for i = 1:j #second-level reorthogonalisation
            H·µ£‚Çë‚Çõ = U‚±º[1:sum(m[1:j]),(i-1)‚Ñì+1:i*‚Ñì]'*S‚±º + U‚±º[sum(m[1:j])+1:2sum(m[1:j]),(i-1)‚Ñì+1:i*‚Ñì]'*U ∞ #not the full residual
            S‚±º -= U‚±º[1:sum(m[1:j]),(i-1)‚Ñì+1:i*‚Ñì]*H·µ£‚Çë‚Çõ #reorthogonalise S‚±º against U‚±º,‚ÇÅ
            U ∞ -= U‚±º[sum(m[1:j])+1:2sum(m[1:j]),(i-1)‚Ñì+1:i*‚Ñì]*H·µ£‚Çë‚Çõ #and U ∞ against U‚±º,‚ÇÇ
            H‚Çñ[(i-1)‚Ñì+1:i*‚Ñì,(j-1)‚Ñì+1:j*‚Ñì] += H·µ£‚Çë‚Çõ #correct block column of H‚Çñ
        end
        Q·µó,R·µó = qr([S‚±º;R ∞;U ∞]) #standard QR factorisation, not RRQR
        Q·µó = Matrix(Q·µó) #we must force explicit formation of Q·µó
        if rank(R·µó,rtol=deftol) < ‚Ñì #this means (at least partial) breakdown of the concurrent block Arnoldi procedure
            if verb == 2
                rk = rank(R·µó,rtol=deftol)
                print("üü•Breakdown at j=$j (rank=$rk)\n")
            elseif verb == 1
                print("üü•j=$j\n")
            end
            @warn "breakdown at j=$j, returning only Q‚±º" #warn the user, to prevent silent failure from causing problems
            return Q‚±º,nothing,nothing,nothing,nothing,nothing #return Q‚±º because it might still be useful (probably not)
        end
        H‚Çñ[j*‚Ñì+1:(j+1)‚Ñì,(j-1)‚Ñì+1:j*‚Ñì] = R·µó #fill in bottom-right block entry of H‚Çñ
        U‚±º = [[[U‚±º[1:sum(m[1:j]),:];zeros(m[j+1],j*‚Ñì);U‚±º[sum(m[1:j])+1:2sum(m[1:j]),:]] Q·µó];zeros(m[j+1],(j+1)‚Ñì)] #form new columns and rows of U‚±º
        if verb == 2
            print("TOAR relation residual: ")
            display(opnorm([-(M‚Åª¬π(D(Q‚±º[:,1:sum(m[1:j])]*U‚±º[1:sum(m[1:j]),1:j*‚Ñì]) + K(Q‚±º[:,1:sum(m[1:j])]*U‚±º[sum(m)+1:sum(m)+sum(m[1:j]),1:j*‚Ñì])));Q‚±º[:,1:sum(m[1:j])]*U‚±º[1:sum(m[1:j]),1:j*‚Ñì]] - [Q‚±º*U‚±º[1:sum(m),:];Q‚±º*U‚±º[sum(m)+1:2sum(m),:]]*H‚Çñ[1:(j+1)‚Ñì,1:j*‚Ñì],1) / opnorm([Q‚±º*U‚±º[1:sum(m),:];Q‚±º*U‚±º[sum(m)+1:2sum(m),:]]*H‚Çñ[1:(j+1)‚Ñì,1:j*‚Ñì],1)) #this was soul-crushing to debug
            print("Q‚±º residual: ")
            display(opnorm(Q‚±º'*Q‚±º-I,1))
            print("U‚±º residual: ")
            display(opnorm(U‚±º'*U‚±º-I,1))
            print("\n")
        end
    end
    j = k-1 #rather than going through the expression for œÅ‚ÇÉ and changing every j to k-1, I just set this and copy-paste it
    œÅ‚ÇÅ = opnorm(Q‚±º'*Q‚±º-I,1) # }
    œÅ‚ÇÇ = opnorm(U‚±º'*U‚±º-I,1) # } - these two residuals are easier to type out than œÅ‚ÇÉ
    œÅ‚ÇÉ = opnorm([-(M‚Åª¬π(D(Q‚±º[:,1:sum(m[1:j])]*U‚±º[1:sum(m[1:j]),1:j*‚Ñì]) + K(Q‚±º[:,1:sum(m[1:j])]*U‚±º[sum(m)+1:sum(m)+sum(m[1:j]),1:j*‚Ñì])));Q‚±º[:,1:sum(m[1:j])]*U‚±º[1:sum(m[1:j]),1:j*‚Ñì]] - [Q‚±º*U‚±º[1:sum(m),:];Q‚±º*U‚±º[sum(m)+1:2sum(m),:]]*H‚Çñ[1:(j+1)‚Ñì,1:j*‚Ñì],1) / opnorm([Q‚±º*U‚±º[1:sum(m),:];Q‚±º*U‚±º[sum(m)+1:2sum(m),:]]*H‚Çñ[1:(j+1)‚Ñì,1:j*‚Ñì],1) #this was soul-crushing to debug
    if verb == 1
        print("üü¶\nTOAR relation residual: ")
        display(œÅ‚ÇÉ)
        print("Q‚±º residual: ")
        display(opnorm(Q‚±º'*Q‚±º-I,1))
        print("U‚±º residual: ")
        display(opnorm(U‚±º'*U‚±º-I,1))
        print("\n")
    elseif verb == 2
        print("üü¶Terminated successfully.\n\n")
    end
    return Q‚±º,U‚±º,H‚Çñ,œÅ‚ÇÅ,œÅ‚ÇÇ,œÅ‚ÇÉ
end

"""
    quadEigBTOAR(M::AbstractMatrix, D::AbstractMatrix, K::AbstractMatrix, k::Int, ‚Ñì::Int; œÉ::Union{Float64,Complex{Float64}}=0.0+0.0im, inv::Bool=true, dtol::Float64=1e-10, rrv::Int=0, flvd::Bool=true, verb::Int=0, check_singular::Bool=false)
    
Compute some eigenpairs of the QEP `(Œª¬≤M + ŒªD + K)x=0` using the block TOAR algorithm.

# Arguments:
 -`M::AbstractMatrix`: mass matrix of the QEP.\n
 -`D::AbstractMatrix`: damping matrix of the QEP.\n
 -`K::AbstractMatrix`: stiffness matrix of the QEP.\n
 -`k::Int`: number of block TOAR iterations.\n
 -`‚Ñì::Int`: block size/width.\n
 -`œÉ::Union{Float64,Complex{Float64}}`: spectral transformation shift to use (default `0`).\n
 -`inv::Bool`: whether to use spectral inversion (default yes).\n
 -`dtol::Float64`: optional internal numerical deflation/breakdown tolerance for BTOAR.\n
 -`rrv::Int`: the number of inverse power iterations to use in Ritz vector refinement (default `0`).\n
 -`flvd::Bool`: whether to use Fan, Lin and Van Dooren scaling on the QEP (default yes).\n
 -`verb::Int`: level of verbosity. 0: no verbosity, 1: some verbosity, 2: full verbosity. `verb=2` has a large performance impact.\n
 -`check_singular::Bool`: whether to test for numerical singularity and warn if it is found. Default `false`, setting to `true` can have a significant performance impact.\n

# Returns:
 -`Œª::Vector{ComplexF64}`: Array of Ritz values (approximate eigenvalues).\n
 -`V::Matrix{ComplexF64}`: Array of Ritz vectors (approximate eigenvectors).\n
 -`œÅ::Vector{ComplexF64}`: Array of backward error residuals for the eigenpairs.\n
"""
function quadEigBTOAR(M::AbstractMatrix,D::AbstractMatrix,K::AbstractMatrix,k::Int,‚Ñì::Int;œÉ::Union{Float64,Complex{Float64}}=0.0+0.0im,inv::Bool=true,dtol::Float64=1e-10,rrv::Int=0,flvd::Bool=true,verb::Int=0,check_singular::Bool=false)
    n = size(M,1) #take n implicitly
    if false in (n .== [size(M,2);size(D,1);size(D,2);size(K,1);size(K,2)]) #M, D and K must all be n√ón
        error("M, D and K must all be n√ón")
    end
    
    if verb > 2
        @warn "valid values of verb are 0, 1 and 2\nSetting verb to 2"
        verb = 2
    end
    if verb < 0
        @warn "valid values of verb are 0, 1 and 2\nSetting verb to 0"
        verb = 0
    end
    
    if check_singular
        if (cond(M,1) > 1e10) && (cond(K,1) > 1e10) #only if both of these two are singular can the whole QEP be
            test_Œª = [1e-9,1e-6,1e-3,1.0,1e3,1e6,1e9,-1e-9,-1e-6,-1e-3,-1.0,-1e3,-1e6,-1e9] #only test real values, this is not exhaustive
            could_be_singular = true
            for i in test_Œª
                if cond(i^2*M+i*D+K) < 1e10
                    could_be_singular = false
                    break
                end
            end
        end
        if could_be_singular
            @warn "QEP could be numerically singular."
        elseif verb == 2
            print("QEP is not numerically singular üëç\n\n")
        end
    end

    M‚Çô‚Çí·µ£‚Çò = opnorm(M,1) #precompute matrix norms for efficiency
    D‚Çô‚Çí·µ£‚Çò = opnorm(D,1)
    K‚Çô‚Çí·µ£‚Çò = opnorm(K,1)
    badly_scaled_QEP = maximum(abs.(log.(10,[M‚Çô‚Çí·µ£‚Çò/D‚Çô‚Çí·µ£‚Çò,M‚Çô‚Çí·µ£‚Çò/K‚Çô‚Çí·µ£‚Çò,D‚Çô‚Çí·µ£‚Çò/K‚Çô‚Çí·µ£‚Çò]))) > 8 #the QEP is considered badly scaled if the ratio of any of the 1-norms of its coefficient matrices is more than 10‚Å∏
    #Fan, Lin & Van Dooren scaling (2004)
    Œ≥ = flvd ? sqrt(K‚Çô‚Çí·µ£‚Çò/M‚Çô‚Çí·µ£‚Çò) : 1.0 #eigenvalue scaling
    Œ¥ = flvd ? 2/(K‚Çô‚Çí·µ£‚Çò+Œ≥*D‚Çô‚Çí·µ£‚Çò) : 1.0 #uniform scaling
    if flvd
        still_badly_scaled = maximum(abs.(log.(10,[Œ≥*M‚Çô‚Çí·µ£‚Çò/D‚Çô‚Çí·µ£‚Çò,Œ≥^2*M‚Çô‚Çí·µ£‚Çò/K‚Çô‚Çí·µ£‚Çò,Œ≥*D‚Çô‚Çí·µ£‚Çò/K‚Çô‚Çí·µ£‚Çò]))) > 8 #cancelled factors of Œ≥ and excluded Œ¥ since it makes no difference
        if still_badly_scaled
            @warn "QEP still badly scaled after Fan, Lin & Van Dooren scaling: Œ≥¬≤Œ¥‚ÄñM‚Äñ‚ÇÅ=$(Œ≥^2*Œ¥*M‚Çô‚Çí·µ£‚Çò), Œ≥Œ¥‚ÄñD‚Äñ‚ÇÅ=$(Œ≥*Œ¥*D‚Çô‚Çí·µ£‚Çò), Œ¥‚ÄñK‚Äñ‚ÇÅ=$(Œ¥*K‚Çô‚Çí·µ£‚Çò)."
        end
    else
        if badly_scaled_QEP
            @warn "QEP is badly scaled: ‚ÄñM‚Äñ‚ÇÅ=$M‚Çô‚Çí·µ£‚Çò, ‚ÄñD‚Äñ‚ÇÅ=$D‚Çô‚Çí·µ£‚Çò, ‚ÄñK‚Äñ‚ÇÅ=$K‚Çô‚Çí·µ£‚Çò. Consider setting flvd=true."
        end
    end
    if verb > 0 #some or all verbosity
        print("== SCALING INFORMATION ==\n")
        if flvd
            print("    Fan, Lin & Van Dooren scaling applied with Œ≥=$Œ≥, Œ¥=$Œ¥.\n    Pre-scaling matrix norms:\n        ‚ÄñM‚Äñ‚ÇÅ=$M‚Çô‚Çí·µ£‚Çò\n        ‚ÄñD‚Äñ‚ÇÅ=$D‚Çô‚Çí·µ£‚Çò\n        ‚ÄñK‚Äñ‚ÇÅ=$K‚Çô‚Çí·µ£‚Çò\n    Scaled matrix norms:\n        Œ≥¬≤Œ¥‚ÄñM‚Äñ‚ÇÅ=$(Œ≥^2*Œ¥*M‚Çô‚Çí·µ£‚Çò)\n        Œ≥Œ¥‚ÄñD‚Äñ‚ÇÅ=$(Œ≥*Œ¥*D‚Çô‚Çí·µ£‚Çò)\n        Œ¥‚ÄñK‚Äñ‚ÇÅ=$(Œ¥*K‚Çô‚Çí·µ£‚Çò)\n\n")
        else
            print("    No scaling applied.\n    Matrix norms:\n        ‚ÄñM‚Äñ‚ÇÅ=$M‚Çô‚Çí·µ£‚Çò\n        ‚ÄñD‚Äñ‚ÇÅ=$D‚Çô‚Çí·µ£‚Çò\n        ‚ÄñK‚Äñ‚ÇÅ=$K‚Çô‚Çí·µ£‚Çò\n\n")
        end
    end
    
    K‚Çõ = Œ¥*K + œÉ*Œ¥*D + œÉ^2*Œ¥*M #scaled and shifted matrices (I multiplied out the cancelling factors of Œ≥)
    D‚Çõ = Œ¥*Œ≥*D + 2œÉ*Œ¥*Œ≥*M
    M‚Çõ = Œ¥*Œ≥^2*M
    
    M·¥∏·µÅ = lu(inv ? K‚Çõ : M‚Çõ) #factorise M for fast linear solves
    M‚Åª¬π(x) = M·¥∏·µÅ\x #use factorised version of M
    M¬π(x) = (inv ? K‚Çõ : M‚Çõ)*x
    D¬π(x) = D‚Çõ*x #we call the functions D¬π and K¬π because the names D and K are taken
    K¬π(x) = (inv ? M‚Çõ : K‚Çõ)*x
    
    if verb > 0
        print("== BTOAR ALGORITHM ==\n\n")
    end
    Q‚Çñ,_,_,_,_,_ = BTOAR(M‚Åª¬π,D¬π,K¬π,rand(ComplexF64,n,‚Ñì),k,deftol=dtol,verb=verb) #run the BTOAR algorithm
    m = size(Q‚Çñ,2) #there might have been deflations
    
    if false #rrv (temporary bodge)
        MQ‚Çñ = M¬π(Q‚Çñ) #save intermediate step for refined ritz vectors
        DQ‚Çñ = D¬π(Q‚Çñ)
        KQ‚Çñ = K¬π(Q‚Çñ)
        M‚Çò = Q‚Çñ'*MQ‚Çñ #reduced order QEP
        D‚Çò = Q‚Çñ'*DQ‚Çñ
        K‚Çò = Q‚Çñ'*KQ‚Çñ
    else
        M‚Çò = Q‚Çñ'*M¬π(Q‚Çñ) #reduced order QEP
        D‚Çò = Q‚Çñ'*D¬π(Q‚Çñ)
        K‚Çò = Q‚Çñ'*K¬π(Q‚Çñ)
    end
    LP = linearize(K‚Çò,D‚Çò,M‚Çò) #linearize the QEP
    Z = zeros(ComplexF64,m,2m) #preallocate space for reduced-order eigenvectors
    Œª,V = eigen(LP.A,LP.B) #generalised eigenproblem solver
    if false #rrv (temporary bodge)
        MQ‚Çñ·µÄMQ‚Çñ = MQ‚Çñ'MQ‚Çñ #pre-form matrices for faster formation of PQ
        MQ‚Çñ·µÄDQ‚Çñ = MQ‚Çñ'DQ‚Çñ #these multiplications are (k‚Ñì√ón)(n√ók‚Ñì)
        MQ‚Çñ·µÄKQ‚Çñ = MQ‚Çñ'KQ‚Çñ
        DQ‚Çñ·µÄMQ‚Çñ = DQ‚Çñ'MQ‚Çñ
        DQ‚Çñ·µÄDQ‚Çñ = DQ‚Çñ'DQ‚Çñ
        DQ‚Çñ·µÄKQ‚Çñ = DQ‚Çñ'KQ‚Çñ #yeah, there are a lot of them but it's most efficient way if m >> 9
        KQ‚Çñ·µÄMQ‚Çñ = KQ‚Çñ'MQ‚Çñ
        KQ‚Çñ·µÄDQ‚Çñ = KQ‚Çñ'DQ‚Çñ
        KQ‚Çñ·µÄKQ‚Çñ = KQ‚Çñ'KQ‚Çñ
        for i in 1:2m
            #additions here are only of k‚Ñì√ók‚Ñì matrices (cheap)
            PQ·µÄPQ = Œª[i]'^2*(Œª[i]^2*MQ‚Çñ·µÄMQ‚Çñ + Œª[i]*MQ‚Çñ·µÄDQ‚Çñ + MQ‚Çñ·µÄKQ‚Çñ) + Œª[i]'*(Œª[i]^2*DQ‚Çñ·µÄMQ‚Çñ + Œª[i]*DQ‚Çñ·µÄDQ‚Çñ + DQ‚Çñ·µÄKQ‚Çñ) + Œª[i]^2*KQ‚Çñ·µÄMQ‚Çñ + Œª[i]*KQ‚Çñ·µÄDQ‚Çñ + KQ‚Çñ·µÄKQ‚Çñ #matrix to find least dominant right singular vector of
            Z[:,i] = arpack ? eigs(PQ·µÄPQ,nev=1,which=:LM,ritzvec=true,v0=V[1:m,i],sigma=0.0,tol=1e-50)[2] : svd(Œª[i]^2*MQ‚Çñ + Œª[i]*DQ‚Çñ + KQ‚Çñ).V[:,m]
        end
    else
        for i in 1:2m #extract quadratic eigenvectors
            Z[:,i] = (abs(Œª[i]) > 1) ? V[1:m,i] : V[m+1:2m,i] #this should be more stable I think
            Z[:,i] /= norm(Z[:,i]) #normalise
        end
    end
    
    Œª .^= (inv ? -1 : 1) #if QEP was inverted, uninvert eigenvalues
    Œª .+= œÉ/Œ≥ #unshift eigenvalues
    Œª .*= Œ≥ #unscale eigenvalues
    
    X = Q‚Çñ*Z #transform eigenvectors back to full-sized space (they stay normalised)
    
    œÅ = zeros(2m) #preallocate space for residuals
    for i in 1:2m #calculate backward error residuals
        œÅ[i] = norm(Œª[i]^2*M*X[:,i]+Œª[i]*D*X[:,i]+K*X[:,i]) / (abs2(Œª[i])*M‚Çô‚Çí·µ£‚Çò+abs(Œª[i])*D‚Çô‚Çí·µ£‚Çò+K‚Çô‚Çí·µ£‚Çò)
    end
    if verb == 2 #if maximum verbosity, we say a bit about the quality of results
        print("== RESIDUAL INFORMATION ==\n    num. residuals below 10‚Åª¬π‚Åµ: $(sum(œÅ .‚â§ 1e-15))\n    num. residuals below 10‚Åª¬π¬≤: $(sum(œÅ .‚â§ 1e-12))\n    num. residuals below 10‚Åª‚Åπ: $(sum(œÅ .‚â§ 1e-9))\n    num. residuals below 10‚Åª‚Å∂: $(sum(œÅ .‚â§ 1e-6))\n\n")
    end
    return Œª,X,œÅ #return eigenvalues, eigenvectors, residuals
end

"""
    restartBTOAR(Q‚ñ°::Matrix, U‚ñ°::Matrix, H‚ñ°::Matrix, keep::Function, verb::Int=0)

Purge the second-order Krylov basis `Q‚ñ°` of some of its Ritz vector dimensions, while keeping selected ones.

# Arguments
 -`Q‚ñ°::Matrix`: second-order Krylov basis from BTOAR to be purged.\n
 -`U‚ñ°::Matrix`: auxiliary matrix from BTOAR.\n
 -`H‚ñ°::Matrix`: auxiliary matrix from BTOAR.\n
 -`keep::Function`: function `keep(Œª)` that returns `true` if an eigenvalue should be locked and `false` if it should be purged.\n
 -`verb::Int`: verbosity level. 0: no verbosity, 1: some verbosity, 2: full verbosity.\n

# Returns
 -`Q·µ£::Matrix`: reduced-dimension second-order Krylov basis.\n
 -`U‚Çö‚Çä‚ÇÅ::Matrix`: reduced auxiliary matrix.\n
 -`H‚Çö‚Çä‚ÇÅ::Matrix`: reduced auxiliary matrix.\n
"""
function restartBTOAR(Q‚ñ°::Matrix,U‚ñ°::Matrix,H‚ñ°::Matrix,keep::Function,verb::Int=0)
    if verb > 2
        @warn "valid values of verb are 0, 1 and 2\nSetting verb to 2"
        verb = 2
    end
    if verb < 0
        @warn "valid values of verb are 0, 1 and 2\nSetting verb to 0"
        verb = 0
    end

    schurfact = schur(H‚ñ°[1:size(H‚ñ°,2),:]) #Schur factorisation of the top square
    #if !(false in keep(schurfact.values)) #if we don't need to get rid of anything, no need to do any work
    #    if verb == 2
    #        print("Deflated nothing.\n")
    #    end
    #    if verb > 0 #brief verbose output of number of discarded/retained dimensions
    #        print("Dimensions retained: $(size(Q·µ£,2))\n")
    #        print("Dimensions purged: 0\n\n")
    #    end
    #    return Q‚ñ°,U‚ñ°,H‚ñ°
    #end
    ordschur!(schurfact,keep(schurfact.values)) #reorder Schur factorisation to put desired eigenvalues in top left
    
    #determine some constants implicitly
    p = sum(keep(schurfact.values))
    ‚Ñì = size(H‚ñ°,1)-size(H‚ñ°,2)
    
    H‚Çö‚Çä‚ÇÅ = [schurfact.T[1:p,1:p];H‚ñ°[size(H‚ñ°,2)+1:size(H‚ñ°,1),:]*schurfact.Z[:,1:p]] #form new H
    
    U‚ñ°‚ÅΩ¬π‚Åæ = U‚ñ°[1:size(Q‚ñ°,2),:] #deconstruct U‚ñ° for readability
    U‚ñ°‚ÅΩ¬≤‚Åæ = U‚ñ°[size(Q‚ñ°,2)+1:2size(Q‚ñ°,2),:]
    U,Œ£,V = psvd([[U‚ñ°‚ÅΩ¬π‚Åæ[1:size(U‚ñ°‚ÅΩ¬π‚Åæ,1)-‚Ñì,1:size(U‚ñ°,2)-‚Ñì]*schurfact.Z[:,1:p];zeros(‚Ñì,p)] U‚ñ°‚ÅΩ¬π‚Åæ[:,size(U‚ñ°,2)-‚Ñì+1:size(U‚ñ°,2)] [U‚ñ°‚ÅΩ¬≤‚Åæ[1:size(U‚ñ°‚ÅΩ¬≤‚Åæ,1)-‚Ñì,1:size(U‚ñ°,2)-‚Ñì]*schurfact.Z[:,1:p];zeros(‚Ñì,p)] U‚ñ°‚ÅΩ¬≤‚Åæ[:,size(U‚ñ°,2)-‚Ñì+1:size(U‚ñ°,2)]],rank=p+2‚Ñì) #that took a while to type
    
    U‚Çö‚Çä‚ÇÅ = kron(I(2),Diagonal(Œ£))*[V'[:,1:p+‚Ñì];V'[:,p+‚Ñì+1:2(p+‚Ñì)]]
    
    Q·µ£ = Q‚ñ°*U #dominant flop cost
    
    if verb > 0 #brief verbose output of number of discarded/retained dimensions
        print("Dimensions retained: $(size(Q·µ£,2))\n")
        print("Dimensions purged: $(size(Q‚ñ°,2)-size(Q·µ£,2))\n\n")
    end
    
    return Q·µ£,U‚Çö‚Çä‚ÇÅ,H‚Çö‚Çä‚ÇÅ
end

"""
    continueBTOAR(M‚Åª¬π::Function, D::Function, K::Function, Q·µ£::Matrix{Complex{Float64}}, U‚Çö‚Çä‚ÇÅ::Matrix{Complex{Float64}}, H‚Çö‚Çä‚ÇÅ::Matrix{Complex{Float64}}, k::Int, ‚Ñì::Int; deftol::Float64=1e-10)

Continue the BTOAR algorithm after a restart.

# Arguments
 -`M‚Åª¬π::Function`: function that provides left-multiplication of `n`√ó`‚Ñì` matrices by the inverse of M.\n
 -`D::Function`: function that provides left-multiplication of `n`√ó`‚Ñì` matrices by the matrix D.\n
 -`K::Function`: function that provides left-multiplication of `n`√ó`‚Ñì` matrices by the matrix K.\n
 -`Q·µ£::Matrix{Complex{Float64}}`: locked second-order Krylov basis.\n
 -`U‚Çö‚Çä‚ÇÅ::Matrix{Complex{Float64}}`: locked auxiliary matrix.\n
 -`H‚Çö‚Çä‚ÇÅ::Matrix{Complex{Float64}}`: locked auxiliary matrix.\n
 -`k::Int`: number of new blocks to add to the subspace.\n
 -`‚Ñì::Int`: block size/width.\n
 -`deftol::Float64`: internal numerical tolerance for deflation detection, defaults to `1e-10`.\n
 -`verb::Int`: verbosity option. 0: no verbosity, 1: some verbosity, 2: full verbosity. Full verbosity has a large performance impact.\n

# Returns
 -`Q::Matrix`: second-order Krylov subspace basis.\n
 -`U::Matrix`: auxiliary matrix.\n
 -`H::Matrix`: auxiliary matrix.\n
"""
function continueBTOAR(M‚Åª¬π::Function,D::Function,K::Function,Q·µ£::Matrix,U‚Çö‚Çä‚ÇÅ::Matrix,H‚Çö‚Çä‚ÇÅ::Matrix,k::Int,‚Ñì::Int;deftol::Float64=1e-10,verb::Int=0)
    n = size(Q·µ£,1) #take n implicitly
    
    if deftol < eps(Float64) #warning about setting deflation tolerance too low
        @warn "deftol should not be set lower than œµ‚âà2.22√ó10‚Åª¬π‚Å∂ (deftol=$deftol)\nSetting deftol to œµ"
        deftol = eps(Float64)
    end
    if deftol ‚â• 1.0 #not sure what the highest reasonable deftol would be
        @warn "deftol way too large (deftol=$deftol)\nSetting deftol to œµ‚Ñì=$(‚Ñì*eps(Float64))"
        deftol = ‚Ñì*eps(Float64)
    end
    if k*‚Ñì+size(Q·µ£,2) > n #warning about setting k too large
        @warn "k‚Ñì+r greater than n, expect deflation (k‚Ñì+r = $(k*‚Ñì+size(Q·µ£,2)), n = $n)"
    end
    if verb > 2
        @warn "valid values of verb are 0, 1 and 2\nSetting verb to 2"
        verb = 2
    end
    if verb < 0
        @warn "valid values of verb are 0, 1 and 2\nSetting verb to 0"
        verb = 0
    end
    
    #no need to set up quantities, they already exist, we just need to make copies (inefficient, should really write an in-place function)
    Q = Matrix{ComplexF64}(Q·µ£)
    U = Matrix{ComplexF64}(U‚Çö‚Çä‚ÇÅ)
    H = Matrix{ComplexF64}(H‚Çö‚Çä‚ÇÅ)
    
    for j in 1:k #main for loop
        R‚±º = M‚Åª¬π(D(Q*-U[1:Int(size(U,1)/2),size(U,2)-‚Ñì+1:size(U,2)]) + K(Q*-U[Int(size(U,1)/2)+1:size(U,1),size(U,2)-‚Ñì+1:size(U,2)])) #take next R‚±º block vector
        S‚±º = zeros(Complex{Float64},size(Q,2),‚Ñì) #preallocate S‚±º
        for i in 1:size(Q,2) #doing it this way seems to greatly reduce error for Ansys QEPs
            S‚±º[i:i,:] = Q[:,i:i]'*R‚±º #coefficients of components of R‚±º parallel to columns of Q‚±º
            R‚±º -= Q[:,i:i]*S‚±º[i:i,:] #subtract off parts of R‚±º that are parallel to columns of Q‚±º
        end
        for i in 1:size(Q,2) #partial reorthogonalisation
            S·µ£‚Çë‚Çõ = Q[:,i:i]'*R‚±º #not the full residual (block) vector
            R‚±º -= Q[:,i:i]*S·µ£‚Çë‚Çõ #correct R‚±º
            S‚±º[i:i,:] += S·µ£‚Çë‚Çõ #correct S‚±º
        end
        Q ∞,R ∞ = rrqr(R‚±º,deftol) #MIGHT WANT TO DO CHEAP RANK TEST HERE FOR EFFICIENCY DEPENDING ON PERFORMANCE OF RRQR
        m = size(Q ∞,2) #record the rank of R‚±º-Q‚±º*S‚±º
        if m < ‚Ñì #if we have deflation
            if verb == 1 #if we have medium verbosity
                print("üü®j=$j,m‚±º=$m\n") #tell the user
            elseif verb == 2 #if we have high verbosity
                print("üü®Deflation at j=$j (m‚±º=$m) ") #tell the user more
                #here, we want to estimate the maximum value of deftol that would have caused the deflation to pass
                tdt = deftol #trial deftol starts as deftol
                for i in 1:20 #don't need a very fine approximation
                    if size(rrqr(R‚±º,tdt)[1],2) == m #if too high
                        tdt *= (eps(Float64) / deftol)^(2.0^-i)
                    else #if too low
                        tdt *= (deftol / eps(Float64))^(2.0^-i)
                    end
                end
                print("(mdt=$tdt)\n")
            end
        elseif verb == 2 #if verbosity is high and there is no deflation
            print("üü©No deflation at j=$j ") #we inform the user
            #here, we want to estimate the minimum value of deftol that would have caught a "deflation"
            tdt = deftol #trial deftol starts as deftol
            for i in 1:20 #don't need a very fine approximation
                if size(rrqr(R‚±º,tdt)[1],2) < m #if too high
                    tdt *= (deftol / 1.0)^(2.0^-i)
                else #if too high
                    tdt *= (1.0 / deftol)^(2.0^-i)
                end
            end
            print("(mdt=$tdt)\n")
        elseif verb == 1 #finally, if verbosity is medium and there is no deflation
            print("üü©") #just a green square with no newline character
        end
        
        Q = [Q Q ∞] #append the newly computed columns to Q‚±º
        U ∞ = U[1:Int(size(U,1)/2),size(U,2)-‚Ñì+1:size(U,2)] #we copy this because we want to modify it in the orthogonalisation without modifying U‚±º
        H = [H zeros(size(H,1),‚Ñì);zeros(‚Ñì,size(H,2)) zeros(‚Ñì,‚Ñì)] #expand H (zeros for now)
        for i = 1:size(U,2) #second-level orthogonalisation
            H[i:i,size(H,2)-‚Ñì+1:size(H,2)] = U[1:Int(size(U,1)/2),i:i]'*S‚±º + U[Int(size(U,1)/2)+1:size(U,1),i:i]'*U ∞ #fill in new block column of H‚Çñ
            S‚±º -= U[1:Int(size(U,1)/2),i:i]*H[i:i,size(H,2)-‚Ñì+1:size(H,2)] #orthogonalise S‚±º against U‚±º,‚ÇÅ
            U ∞ -= U[Int(size(U,1)/2)+1:size(U,1),i:i]*H[i:i,size(H,2)-‚Ñì+1:size(H,2)] #and U ∞ against U‚±º,‚ÇÇ
        end
        for i = 1:size(U,2) #second-level reorthogonalisation
            H·µ£‚Çë‚Çõ = U[1:Int(size(U,1)/2),i:i]'*S‚±º + U[Int(size(U,1)/2)+1:size(U,1),i:i]'*U ∞ #not the full residual
            S‚±º -= U[1:Int(size(U,1)/2),i:i]*H·µ£‚Çë‚Çõ #reorthogonalise S‚±º against U‚±º,‚ÇÅ
            U ∞ -= U[Int(size(U,1)/2)+1:size(U,1),i:i]*H·µ£‚Çë‚Çõ #and U ∞ against U‚±º,‚ÇÇ
            H[i:i,size(H,2)-‚Ñì+1:size(H,2)] += H·µ£‚Çë‚Çõ #correct block column of H‚Çñ
        end
        Q·µó,R·µó = qr([S‚±º;R ∞;U ∞]) #standard QR factorisation, not RRQR
        Q·µó = Matrix(Q·µó) #we must force explicit formation of Q·µó
        if rank(R·µó,rtol=deftol) < ‚Ñì #this means (at least partial) breakdown of the concurrent block Arnoldi procedure
            if verb == 2
                rk = rank(R·µó,rtol=deftol)
                print("üü•Breakdown at j=$j (rank=$rk)\n")
            elseif verb == 1
                print("üü•j=$j\n")
            end
            @warn "breakdown at j=$j, returning only Q‚±º" #warn the user, to prevent silent failure from causing problems
            return Q,nothing,nothing #return Q‚±º because it might still be useful (probably not)
        end
        H[size(H,1)-‚Ñì+1:size(H,1),size(H,2)-‚Ñì+1:size(H,2)] = R·µó #fill in bottom-right block entry of H‚Çñ
        U = [[[U[1:Int(size(U,1)/2),:];zeros(size(Q·µó,1)-size(U,1),size(U,2));U[Int(size(U,1)/2)+1:size(U,1),:]] Q·µó];zeros(size(Q·µó,1)-size(U,1),size(U,2)+size(Q·µó,2))] #form new columns and rows of U‚±º
    end
    if verb > 0
        print("üü¶\n\n")
    end
    return Q,U,H
end

"""
    quadEigRBTOAR(M::AbstractMatrix, D::AbstractMatrix, K::AbstractMatrix, req::Int=100, tol::Float64=1e-12, k‚Ñì‚Çò‚Çê‚Çì::Int, ‚Ñì::Int; step::Int=10, œÉ::Union{Float64,ComplexF64}=0.0+0.0im, smallest::Bool=true, keep::Function=every, dtol::Float64=1e-10, rrv::Int=0, flvd::Bool=true, verb::Int=0, check_singular::Bool=false, give_up::Int=10)

Compute some eigenpairs of the QEP `(Œª¬≤M + ŒªD + K)x=0` using the restarted block TOAR algorithm.

# Arguments
 -`M::AbstractMatrix`: mass matrix from QEP.\n
 -`D::AbstractMatrix`: damping matrix from QEP.\n
 -`K::AbstractMatrix`: stiffness matrix from QEP.\n
 -`req::Int`: required number of eigenpairs. Make sure this is at most `k‚Ñì‚Çò‚Çê‚Çì/2`. Note that the number of returned eigenpairs will often be slightly larger than `req`.\n
 -`tol::Float64`: maximum permissible backward error residual `œÅ` for an eigenpair to be returned.\n
 -`k‚Ñì‚Çò‚Çê‚Çì::Int`: maximum subspace size before restart. Defaults to `300`, reduce this if memory consumption is an issue but set significantly larger than `req`.\n
 -`‚Ñì::Int`: block size/width. Defaults to `1`. It is not advised to set this higher than `5`.\n
 -`step::Int`: minimum number of blocks to add to the subspace between checks for convergence. Defaults to `10`, you may wish to set this lower for a higher `‚Ñì`.\n
 -`œÉ::Union{Float64,ComplexF64}`: shift point for shift-and-invert transformation. Defaults to `0.0`. Should be set within the domain of interest.\n
 -`smallest::Bool`: whether to invert the QEP. Inverting will find eigenvalues closest to `œÉ`, not inverting will find those furthest away. Defaults to `true`.\n
 -`keep::Function`: function that accepts a `ComplexF64` eigenvalue and returns whether it is within the domain of interest. Defaults to always true.\n
 -`dtol::Float64`: internal numerical tolerance for deflation/breakdown detection. Don't change this unless you know what you're doing.\n
 -`rrv::Int`: the number of inverse power iterations to use in Ritz vector refinement (default `0`). Not currently implemented.\n
 -`flvd::Bool`: whether to apply Fan, Lin & Van Dooren scaling to the QEP. Default `true`.\n
 -`verb::Int`: verbosity level. 0: no verbosity, 1: some verbosity, 2: full verbosity. Full verbosity has a large performance impact. (Not implemented yet.)\n
 -`check_singular::Bool`: whether to check if the QEP is close to being singular, default `true`. This test can be expensive and could give false positives for some QEPs.\n
 -`give_up::Int`: how many restarts to allow before terminating in failure.\n

# Returns
 -`Œª::Vector`: array of Ritz values.\n
 -`X::Matrix`: array of Ritz vectors.\n
 -`œÅ::Vector`: array of backward error residuals for returned eigenpairs `Œª`,`X`.\n
"""
function quadEigRBTOAR(M::AbstractMatrix,D::AbstractMatrix,K::AbstractMatrix;req::Int=100,tol::Float64=1e-12,k‚Ñì‚Çò‚Çê‚Çì::Int=300,‚Ñì::Int=1,step::Int=10,œÉ::Union{Float64,ComplexF64}=0.0+0.0im,which::Symbol=:SM,keep::Function=every,dtol::Float64=1e-10,rrv::Int=0,arpack::Bool=true,flvd::Bool=true,verb::Int=0,check_singular::Bool=false,give_up::Int=10)
    n = size(M,1) #take n implicitly
    if false in (n .== [size(M,2);size(D,1);size(D,2);size(K,1);size(K,2)]) #M, D and K must all be n√ón
        error("M, D and K must all be n√ón")
    end
    
    if verb > 2
        @warn "valid values of verb are 0, 1 and 2\nSetting verb to 2"
        verb = 2
    end
    if verb < 0
        @warn "valid values of verb are 0, 1 and 2\nSetting verb to 0"
        verb = 0
    end
    if 2req > k‚Ñì‚Çò‚Çê‚Çì
        @warn "req should not be larger than k‚Ñì‚Çò‚Çê‚Çì/2; the algorithm may stagnate"
    end
    if ‚Ñì*step > 50
        @warn "‚Ñì*step = $(‚Ñì*step), consider setting step lower to avoid building more subspace than necessary"
    end
    if step < 1
        @error "step must be positive"
    end
    if ‚Ñì > 5
        @warn "it is not reccommended to set ‚Ñì greater than 5 (‚Ñì = $‚Ñì)"
    end
    if ‚Ñì < 1
        @error "‚Ñì must be positive"
    end
    if (dtol > 1e-6) || (dtol < 1e-15)
        @warn "bad value for dtol (dtol = $dtol)"
    end
    if which ‚àâ [:SM;:LM]
        @error "valid values of which are :SM and :LM"
    end
    if give_up < 3
        @warn "probably best to set give_up higher than $give_up"
    end
    if give_up < 1
        @error "give_up must be positive (give_up=$give_up)"
    end
    if give_up > 20
        @warn "probably best to set give_up lower than $give_up"
    end
    if n < 1000
        @warn "this eigensolver is not designed for small (n < 10¬≥) QEPs. Consider using QuadEig.jl"
    end

    if rrv != 0
        @warn "refined Ritz vectors are not currently implemented"
    end

    inv = which == :SM #Fran wanted me to rename this argument
    
    if check_singular
        #normally a condition number of 1e10 isn't enough to be called numerically singular in Float64, but for TOAR we have to careful
        if (cond(M,1) > 1e10) && (cond(K,1) > 1e10) #only if both of these two are singular can the whole QEP be
            could_be_singular = true
            if verb == 2
                print("\n‚ö†Ô∏èM and K both close to singular.\n\n")
            end
        end
    end

    M‚Çô‚Çí·µ£‚Çò = opnorm(M,1) #precompute matrix norms for efficiency
    D‚Çô‚Çí·µ£‚Çò = opnorm(D,1)
    K‚Çô‚Çí·µ£‚Çò = opnorm(K,1)
    badly_scaled_QEP = maximum(abs.(log.(10,[M‚Çô‚Çí·µ£‚Çò/D‚Çô‚Çí·µ£‚Çò,M‚Çô‚Çí·µ£‚Çò/K‚Çô‚Çí·µ£‚Çò,D‚Çô‚Çí·µ£‚Çò/K‚Çô‚Çí·µ£‚Çò]))) > 8 #the QEP is considered badly scaled if the ratio of any of the 1-norms of its coefficient matrices is more than 10‚Å∏
    #Fan, Lin & Van Dooren scaling (2004)
    Œ≥ = flvd ? sqrt(K‚Çô‚Çí·µ£‚Çò/M‚Çô‚Çí·µ£‚Çò) : 1.0 #eigenvalue scaling
    Œ¥ = flvd ? 2/(K‚Çô‚Çí·µ£‚Çò+Œ≥*D‚Çô‚Çí·µ£‚Çò) : 1.0 #uniform scaling
    if flvd
        still_badly_scaled = maximum(abs.(log.(10,[Œ≥*M‚Çô‚Çí·µ£‚Çò/D‚Çô‚Çí·µ£‚Çò,Œ≥^2*M‚Çô‚Çí·µ£‚Çò/K‚Çô‚Çí·µ£‚Çò,Œ≥*D‚Çô‚Çí·µ£‚Çò/K‚Çô‚Çí·µ£‚Çò]))) > 8 #cancelled factors of Œ≥ and excluded Œ¥ since it makes no difference
        if still_badly_scaled
            @warn "QEP still badly scaled after Fan, Lin & Van Dooren scaling: Œ≥¬≤Œ¥‚ÄñM‚Äñ‚ÇÅ=$(@sprintf("%.2g",Œ≥^2*Œ¥*M‚Çô‚Çí·µ£‚Çò)), Œ≥Œ¥‚ÄñD‚Äñ‚ÇÅ=$(@sprintf("%.2g",Œ≥*Œ¥*D‚Çô‚Çí·µ£‚Çò)), Œ¥‚ÄñK‚Äñ‚ÇÅ=$(@sprintf("%.2g",Œ¥*K‚Çô‚Çí·µ£‚Çò))."
        end
    else
        if badly_scaled_QEP
            @warn "QEP is badly scaled: ‚ÄñM‚Äñ‚ÇÅ=$(@sprintf("%.2g",M‚Çô‚Çí·µ£‚Çò)), ‚ÄñD‚Äñ‚ÇÅ=$(@sprintf("%.2g",D‚Çô‚Çí·µ£‚Çò)), ‚ÄñK‚Äñ‚ÇÅ=$(@sprintf("%.2g",K‚Çô‚Çí·µ£‚Çò)). Consider setting flvd=true."
        end
    end

    if verb > 0 #some or all verbosity
        print("== SCALING INFORMATION ==\n")
        if flvd
            print("    Fan, Lin & Van Dooren scaling applied with Œ≥=$(@sprintf("%.2g",Œ≥)), Œ¥=$(@sprintf("%.2g",Œ¥)).\n    Pre-scaling matrix norms:\n        ‚ÄñM‚Äñ‚ÇÅ=$(@sprintf("%.2g",M‚Çô‚Çí·µ£‚Çò))\n        ‚ÄñD‚Äñ‚ÇÅ=$(@sprintf("%.2g",D‚Çô‚Çí·µ£‚Çò))\n        ‚ÄñK‚Äñ‚ÇÅ=$(@sprintf("%.2g",K‚Çô‚Çí·µ£‚Çò))\n    Scaled matrix norms:\n        Œ≥¬≤Œ¥‚ÄñM‚Äñ‚ÇÅ=$(@sprintf("%.2g",Œ≥^2*Œ¥*M‚Çô‚Çí·µ£‚Çò))\n        Œ≥Œ¥‚ÄñD‚Äñ‚ÇÅ=$(@sprintf("%.2g",Œ≥*Œ¥*D‚Çô‚Çí·µ£‚Çò))\n        Œ¥‚ÄñK‚Äñ‚ÇÅ=$(@sprintf("%.2g",Œ¥*K‚Çô‚Çí·µ£‚Çò))\n\n")
        else
            print("    No scaling applied.\n    Matrix norms:\n        ‚ÄñM‚Äñ‚ÇÅ=$(@sprintf("%.2g",M‚Çô‚Çí·µ£‚Çò))\n        ‚ÄñD‚Äñ‚ÇÅ=$(@sprintf("%.2g",D‚Çô‚Çí·µ£‚Çò))\n        ‚ÄñK‚Äñ‚ÇÅ=$(@sprintf("%.2g",K‚Çô‚Çí·µ£‚Çò))\n\n")
        end
    end
    
    K‚Çõ = Œ¥*K + œÉ*Œ¥*D + œÉ^2*Œ¥*M #scaled and shifted matrices (I multiplied out the cancelling factors of Œ≥)
    D‚Çõ = Œ¥*Œ≥*D + 2œÉ*Œ¥*Œ≥*M
    M‚Çõ = Œ¥*Œ≥^2*M

    if check_singular && could_be_singular #short-circuiting and so if check_singular is false, could_be_singular doesn't need to exist
        if cond(K‚Çõ,1) > 1e10
            @warn "QEP may be close to singular"
        end
    end
    
    M·¥∏·µÅ = lu(inv ? K‚Çõ : M‚Çõ) #factorise M for fast linear solves
    M‚Åª¬π(x) = M·¥∏·µÅ\x #use factorised version of M
    M¬π(x) = (inv ? K‚Çõ : M‚Çõ)*x
    D¬π(x) = D‚Çõ*x #we call the functions D¬π and K¬π because the names D and K are taken
    K¬π(x) = (inv ? M‚Çõ : K‚Çõ)*x

    
    transformed_keep(Œª) = keep.((Œª .- œÉ) .^ -1 ./ Œ≥) #to keep the right eigenvalues regardless of spectral transformation
    transformed_keep_deflate_distant(Œª) = transformed_keep(Œª) .&& deflate_distant(Œª) #to keep the right eigenvalues and deflate the third most distant
    
    if verb > 0
        print("== START OF BTOAR ALGORITHM ==\n\n")
    end

    ############################## EVERYTHING BEFORE THIS POINT IS BASICALLY THE SAME AS IN quadEigBTOAR() #################################

    #initialise intermediate matrices retained for efficiency
    MQ = zeros(ComplexF64,n,0)
    DQ = zeros(ComplexF64,n,0)
    KQ = zeros(ComplexF64,n,0)

    #initialise reduced order QEP as 0√ó0 matrices
    Q·µÄMQ = zeros(ComplexF64,0,0)
    Q·µÄDQ = zeros(ComplexF64,0,0)
    Q·µÄKQ = zeros(ComplexF64,0,0)

    Q,U,H,_,_,_ = BTOAR(M‚Åª¬π,D¬π,K¬π,rand(ComplexF64,n,‚Ñì),maximum([step,Int(floor(req/‚Ñì))]),deftol=dtol,verb=verb) #initialise by building extra large step
    m = size(Q,2) #there might have been deflations
    good = 0 #number of acceptable eigenpairs computed
    restarts = 0 #restart counter for give_up

    #main loop
    while true
        #form the reduced-order QEP efficiently, taking advantage of prior computations and retained matrices
        #I'm pretty sure this is the most efficient way to do this
        m‚Çó‚Çê‚Çõ‚Çú = size(Q·µÄMQ,1) #m before the next step is taken
        MQ = [MQ M¬π(Q[:,m‚Çó‚Çê‚Çõ‚Çú+1:m])] #next step-column of MQ
        Q·µÄMQ = [Q·µÄMQ Q[:,1:m‚Çó‚Çê‚Çõ‚Çú]'MQ[:,m‚Çó‚Çê‚Çõ‚Çú+1:m];Q[:,m‚Çó‚Çê‚Çõ‚Çú+1:m]'MQ[:,1:m‚Çó‚Çê‚Çõ‚Çú] Q[:,m‚Çó‚Çê‚Çõ‚Çú+1:m]'MQ[:,m‚Çó‚Çê‚Çõ‚Çú+1:m]] #expand
        DQ = [DQ D¬π(Q[:,m‚Çó‚Çê‚Çõ‚Çú+1:m])]
        Q·µÄDQ = [Q·µÄDQ Q[:,1:m‚Çó‚Çê‚Çõ‚Çú]'DQ[:,m‚Çó‚Çê‚Çõ‚Çú+1:m];Q[:,m‚Çó‚Çê‚Çõ‚Çú+1:m]'DQ[:,1:m‚Çó‚Çê‚Çõ‚Çú] Q[:,m‚Çó‚Çê‚Çõ‚Çú+1:m]'DQ[:,m‚Çó‚Çê‚Çõ‚Çú+1:m]]
        KQ = [KQ K¬π(Q[:,m‚Çó‚Çê‚Çõ‚Çú+1:m])]
        Q·µÄKQ = [Q·µÄKQ Q[:,1:m‚Çó‚Çê‚Çõ‚Çú]'KQ[:,m‚Çó‚Çê‚Çõ‚Çú+1:m];Q[:,m‚Çó‚Çê‚Çõ‚Çú+1:m]'KQ[:,1:m‚Çó‚Çê‚Çõ‚Çú] Q[:,m‚Çó‚Çê‚Çõ‚Çú+1:m]'KQ[:,m‚Çó‚Çê‚Çõ‚Çú+1:m]]

        #solve reduced-order problem
        LP = linearize(Q·µÄKQ,Q·µÄDQ,Q·µÄMQ) #linearize the QEP
        Z = zeros(ComplexF64,m,2m) #preallocate space for reduced-order eigenvectors
        Œª,V = eigen(LP.A,LP.B)
        for i in 1:2m #extract quadratic eigenvectors
            Z[:,i] = (abs(Œª[i]) > 1) ? V[1:m,i] : V[m+1:2m,i] #this should be more stable I think
            Z[:,i] /= norm(Z[:,i]) #normalise
        end

        #uninvert, unscale, project back to full space
        Œª .^= (inv ? -1 : 1) #if QEP was inverted, uninvert eigenvalues
        Œª .+= œÉ/Œ≥ #unshift eigenvalues
        Œª .*= Œ≥ #unscale eigenvalues
        X = Q*Z #transform eigenvectors back to full-sized space (they stay normalised)

        #compute residuals
        œÅ = zeros(2m)
        for i in 1:2m #calculate backward error residuals
            œÅ[i] = norm(Œª[i]^2*M*X[:,i]+Œª[i]*D*X[:,i]+K*X[:,i]) / (abs2(Œª[i])*M‚Çô‚Çí·µ£‚Çò+abs(Œª[i])*D‚Çô‚Çí·µ£‚Çò+K‚Çô‚Çí·µ£‚Çò)
        end
        good = sum((œÅ .< tol) .&& keep.(Œª)) #number of acceptable residuals in domain of interest
        if verb == 1
            print("Subspace size: $m / $k‚Ñì‚Çò‚Çê‚Çì\nGood eigenpairs: $good\n\n")
        elseif verb == 2
            print("Subspace size: $m / $k‚Ñì‚Çò‚Çê‚Çì\nTotal good eigenpairs: $(sum((œÅ .< tol)))\nGood eigenpairs in DoI: $good\n\n")
        end

        if good ‚â• req #if we have found enough acceptable eigenpairs
            if verb == 2
                print("$good good eigenpairs found, returning.")
            end
            good_ones = (œÅ .< tol) .&& keep.(Œª) #basically nothing to recompute this: O(k‚Ñì)
            Œª = [Œª[i] for i in 1:size(Œª,1) if good_ones[i]]
            X = hcat([X[:,i] for i in 1:size(X,2) if good_ones[i]]...)
            œÅ = [œÅ[i] for i in 1:size(œÅ,1) if good_ones[i]]
            return Œª,X,œÅ #we're done here
        elseif m+step*‚Ñì > k‚Ñì‚Çò‚Çê‚Çì #if another step could expand the subspace too far
            if restarts == give_up
                @warn "restart limit exceeded, not enough eigenpairs found"
                if verb > 0
                    print("‚ö†Ô∏èRestart limit ($give_up) exceeded, giving up. (good eigenpairs: $good)\n\n")
                end
                good_ones = (œÅ .< tol) .&& keep.(Œª) #basically nothing to recompute this: O(k‚Ñì)
                Œª = [Œª[i] for i in 1:size(Œª,1) if good_ones[i]]
                X = hcat([X[:,i] for i in 1:size(X,2) if good_ones[i]]...)
                œÅ = [œÅ[i] for i in 1:size(œÅ,1) if good_ones[i]]
                return Œª,X,œÅ #return at least what we have
            end
            restarts += 1
            if verb > 0
                print("== RESTART =="*"\n"^(3-verb)) #fancy way of getting the number of newlines right
            end
            if sum(keep.(Œª)) + step*‚Ñì > k‚Ñì‚Çò‚Çê‚Çì #if deflating by keep() would not be enough
                Q,U,H = restartBTOAR(Q,U,H,transformed_keep_deflate_distant,verb)
                if verb == 2
                    print("Deflating according to keep() and ‚Öì most distant.\n\n")
                end
            else #if deflating by keep() is enough
                Q,U,H = restartBTOAR(Q,U,H,transformed_keep,verb)
                if verb == 2
                    print("Deflating only according to keep().\n\n")
                end
            end
            MQ = M¬π(Q)
            DQ = D¬π(Q)
            KQ = K¬π(Q)
            Q·µÄMQ = Q'*M¬π(Q) #no way to avoid this cost really
            Q·µÄDQ = Q'*D¬π(Q)
            Q·µÄKQ = Q'*K¬π(Q)
        else #if we are free to grow the subspace by step
            if verb > 0
                print("== CONTINUING BTOAR ALGORITHM ==\n")
            end
            Q,U,H = continueBTOAR(M‚Åª¬π,D¬π,K¬π,Q,U,H,maximum([step,minimum([Int(floor((req-good)/‚Ñì)),Int(floor((k‚Ñì‚Çò‚Çê‚Çì-m)/‚Ñì))])]),‚Ñì;deftol=dtol,verb=verb) #grow the subspace by as much as we can without overflowing or overdoing it
        end
        m = size(Q,2)
    end
end
